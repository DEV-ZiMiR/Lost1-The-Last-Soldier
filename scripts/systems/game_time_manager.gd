extends Node
class_name GameTimeManagerClass

signal new_day_started(day: int)
signal phase_changed(phase: int)

enum Phase { DAWN, DAY, DUSK, NIGHT }

# -------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü–∏–∫–ª—É --------
@export var day_length: float = 120.0         # –ø–æ–≤–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –¥–æ–±–∏, —Å–µ–∫
@export var dawn_len: float = 12.0            # —Å–≤—ñ—Ç–∞–Ω–æ–∫
@export var day_len: float = 60.0            # –¥–µ–Ω—å
@export var dusk_len: float = 12.0            # –∑–∞—Ö—ñ–¥ (–Ω—ñ—á = —Ä–µ—à—Ç–∞)

# –ë–∞–∑–æ–≤—ñ –∫–æ–ª—å–æ—Ä–∏/—è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –¥–ª—è —Ñ–∞–∑ (–º–æ–∂–µ—à –º—ñ–Ω—è—Ç–∏ –ø—ñ–¥ —Å–≤—ñ–π —Å—Ç–∏–ª—å)
@export var night_tint: Color = Color(0.12, 0.12, 0.24)
@export var dawn_tint:  Color = Color(1.00, 0.85, 0.65)
@export var day_tint:   Color = Color(1, 1, 1)
@export var dusk_tint:  Color = Color(1.00, 0.90, 0.70)

@export var night_brightness: float = 0.30
@export var day_brightness:   float = 1.00

# -------- –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω, —É —è–∫–∏—Ö –≥–æ–¥–∏–Ω–Ω–∏–∫ –º–∞—î –ø—Ä–∏–∑—É–ø–∏–Ω—è—Ç–∏—Å—å --------
# –î–æ–¥–∞–π —Å—é–¥–∏ PackedScene —á–µ—Ä–µ–∑ —ñ–Ω—Å–ø–µ–∫—Ç–æ—Ä (–∞–±–æ —á–µ—Ä–µ–∑ preload —É –∫–æ–¥—ñ).
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥: paused_scene_resources = [ preload("res://scenes/menu.tscn") ]
@export var paused_scene_resources: Array[PackedScene] = []

# -------- –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω --------
var current_time: float = 0.0
var current_day: int = 1
var _phase: Phase = Phase.NIGHT

# -------- –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–¥–∏/–º–∞—Ç–µ—Ä—ñ–∞–ª --------
@onready var fx_layer: CanvasLayer = $PostFX
@onready var fx_rect: ColorRect   = $PostFX/DayNightFX
@onready var fx_mat: ShaderMaterial = fx_rect.material as ShaderMaterial

# —ñ–Ω—Ç–µ—Ä–Ω–∞–ª –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —à–ª—è—Ö—ñ–≤ —Å—Ü–µ–Ω
var _paused_scene_paths: Array[String] = []

# —Å—Ç–∞–Ω –ø–∞—É–∑–∏
var _is_paused_by_scene: bool = false

func _ready() -> void:
	# –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ ColorRect –ø–æ–∫—Ä–∏–≤–∞—î –µ–∫—Ä–∞–Ω —ñ –Ω–µ –ª–æ–≤–∏—Ç—å –º–∏—à—É
	if fx_rect:
		fx_rect.set_anchors_preset(Control.PRESET_FULL_RECT)
		fx_rect.mouse_filter = Control.MOUSE_FILTER_IGNORE

	# –∑–±–µ—Ä–µ–º–æ —à–ª—è—Ö–∏ paused —Å—Ü–µ–Ω (resource_path) –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –ø–æ—Ä—ñ–≤–Ω—è–Ω—å
	_paused_scene_paths.clear()
	for ps in paused_scene_resources:
		if ps != null:
			# PackedScene –º–∞—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å resource_path; —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î –≤ —Ç–≤–æ—ó–π –≤–µ—Ä—Å—ñ—ó ‚Äî –∑–∞–º—ñ–Ω–∏
			var p := ""
			if "resource_path" in ps: # –±–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
				p = ps.resource_path
			else:
				# –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö —á–µ—Ä–µ–∑ tostring –∞–±–æ —á–µ—Ä–µ–∑ –æ–ø–∏—Å
				p = str(ps)
			if p != "":
				_paused_scene_paths.append(p)

	_update_phase_and_fx() # –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç—ñ–≤

func _process(delta: float) -> void:
	# –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç–æ—á–Ω–∞ —Å—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–ø–∏—Å–∫—É –ø–∞—É–∑–Ω–∏—Ö —Å—Ü–µ–Ω
	var should_pause := _is_current_scene_in_paused_list()

	# —Å—Ç–∞–Ω –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî –≤–º–∏–∫–∞—î–º–æ/–≤–∏–º–∏–∫–∞—î–º–æ –µ—Ñ–µ–∫—Ç–∏ —ñ –¥—Ä—É–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	if should_pause and not _is_paused_by_scene:
		# –ø–µ—Ä–µ–π—à–ª–∏ –≤ –ø–∞—É–∑–Ω—É —Å—Ü–µ–Ω—É
		_is_paused_by_scene = true
		_on_pause_start()
		return # –Ω–µ –Ω–∞—Ä–æ—â—É—î–º–æ —á–∞—Å —É —Ü–µ–π –∫–∞–¥—Ä

	elif not should_pause and _is_paused_by_scene:
		# –≤–∏–π—à–ª–∏ –∑ –ø–∞—É–∑–Ω–æ—ó —Å—Ü–µ–Ω–∏ ‚Äî –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ
		_is_paused_by_scene = false
		_on_pause_end()
		# –Ω–µ—Ö–∞–π –¥–∞–ª—ñ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É —É —Ü—å–æ–º—É –∫–∞–¥—Ä—ñ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)

	# —è–∫—â–æ –∑–∞—Ä–∞–∑ –ø–∞—É–∑–∞ ‚Äî –Ω–µ –∫—Ä–æ–∫–∞—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–∫
	if _is_paused_by_scene:
		return

	# –∑–≤–∏—á–∞–π–Ω–∞ —Ä–æ–±–æ—Ç–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫–∞
	current_time += delta
	if current_time >= day_length:
		current_time = 0.0
		current_day += 1
		emit_signal("new_day_started", current_day)
	_update_phase_and_fx()

# –ø–æ–≤–µ—Ä—Ç–∞—î true —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ —Å—Ü–µ–Ω–∞ —î –≤ —Å–ø–∏—Å–∫—É –ø–∞—É–∑–Ω–∏—Ö
func _is_current_scene_in_paused_list() -> bool:
	var cur_scene := get_tree().current_scene
	if cur_scene == null:
		return false
	# –≤ –∫–æ–¥—ñ —Ä–∞–Ω—ñ—à–µ —Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ current_scene.scene_file_path
	var cur_path := ""
	if "scene_file_path" in cur_scene:
		cur_path = cur_scene.scene_file_path
	elif "get_filename" in cur_scene:
		cur_path = cur_scene.get_filename() # –∑–∞–ø–∞—Å–Ω–∏–π
	else:
		# –æ—Å—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—è: to_string
		cur_path = str(cur_scene)

	# –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–º–∏ —à–ª—è—Ö–∞–º–∏
	for p in _paused_scene_paths:
		if p == "":
			continue
		# –ø—Ä—è–º–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ (–ø–æ–≤–Ω–∏–π —à–ª—è—Ö)
		if cur_path == p:
			return true
		# —ñ–Ω–∫–æ–ª–∏ —à–ª—è—Ö–∏ –º–æ–∂—É—Ç—å —Ä—ñ–∑–Ω–∏—Ç–∏—Å—è –≤ —Å–ø–æ—Å–æ–±—ñ –∑–∞–ø–∏—Å—É ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Å—É—Ñ—ñ–∫—Å
		if cur_path.ends_with(p) or p.ends_with(cur_path):
			return true

	return false

# –≤–∏–∫–ª–∏–∫ –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –ø–∞—É–∑–Ω—É —Å—Ü–µ–Ω—É
func _on_pause_start() -> void:
	# –í–∏–º–∏–∫–∞—î–º–æ FX (–ø—Ä–∏–±–∏—Ä–∞—î–º–æ —à–µ–π–¥–µ—Ä–Ω–∏–π –≤–ø–ª–∏–≤)
	if fx_layer:
		fx_layer.visible = false
	# –¥–æ–¥–∞—Ç–∫–æ–≤–æ: —è–∫—â–æ —Ö–æ—á–µ—à –ø–æ–≤–Ω—ñ—Å—Ç—é —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —à–µ–π–¥–µ—Ä–∞, –º–æ–∂–Ω–∞:
	# if fx_mat: fx_mat.set_shader_parameter("u_brightness", 1.0)  # –ø—Ä–∏–∫–ª–∞–¥

	print("–ì–æ–¥–∏–Ω–Ω–∏–∫ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ")
	# –ú–Ü–°–¶–ï –î–õ–Ø –î–û–ü. –õ–û–ì–Ü–ö–ò: –¢–£–¢ –ú–û–ñ–ï–® –î–û–î–ê–¢–ò –î–Ü–á –ü–†–ò –ü–ê–£–ó–Ü (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫ SaveManager –∞–±–æ —ñ–Ω—à—ñ)
	# --- <–¢–£–¢ –í–°–¢–ê–í –¢–í–û–á –°–¶–ï–ù–ò/–õ–û–ì–Ü–ö–£> ---

# –≤–∏–∫–ª–∏–∫ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ –ø–∞—É–∑–Ω–æ—ó —Å—Ü–µ–Ω–∏
func _on_pause_end() -> void:
	# –í–º–∏–∫–∞—î–º–æ FX –Ω–∞–∑–∞–¥
	if fx_layer:
		fx_layer.visible = true
	# –º–æ–∂–µ—à –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —à–µ–π–¥–µ—Ä–∞, —è–∫—â–æ –∑–±–µ—Ä—ñ–≥–∞–≤ —Ä–∞–Ω—ñ—à–µ
	print("–ì–æ–¥–∏–Ω–Ω–∏–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ")

# -------- –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ --------
func get_phase() -> Phase:
	return _phase

func set_time(seconds: float) -> void:
	current_time = clampf(seconds, 0.0, day_length)
	_update_phase_and_fx()

func set_time_normalized01(v: float) -> void:
	current_time = clampf(v, 0.0, 1.0) * day_length
	_update_phase_and_fx()

# -------- –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ª–æ–≥—ñ–∫–∞ (–±–µ–∑ –∑–º—ñ–Ω) --------
func _update_phase_and_fx() -> void:
	var p := current_time / maxf(day_length, 0.001)

	var dawn_end := dawn_len / day_length
	var day_end  := (dawn_len + day_len) / day_length
	var dusk_end := (dawn_len + day_len + dusk_len) / day_length

	var brightness := day_brightness
	var tint := day_tint

	# üîπ –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∞ –ø–ª–∞–≤–Ω–∞ –∑–º—ñ–Ω–∞ –º—ñ–∂ —É—Å—ñ–º–∞ —Ñ–∞–∑–∞–º–∏:
	if p < dawn_end:
		# –Ω—ñ—á ‚Üí —Å–≤—ñ—Ç–∞–Ω–æ–∫
		var t := _smooth_step(_safe_div(p, dawn_end))
		_set_phase(Phase.DAWN)
		brightness = lerp(night_brightness, day_brightness, t)
		tint = night_tint.lerp(dawn_tint, t)

	elif p < day_end:
		# —Å–≤—ñ—Ç–∞–Ω–æ–∫ ‚Üí –¥–µ–Ω—å (–ø–ª–∞–≤–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥)
		var t := _smooth_step(_safe_div(p - dawn_end, day_end - dawn_end))
		_set_phase(Phase.DAY)
		brightness = lerp(day_brightness * 0.9, day_brightness, t)
		tint = dawn_tint.lerp(day_tint, t)

	elif p < dusk_end:
		# –¥–µ–Ω—å ‚Üí –∑–∞—Ö—ñ–¥
		var t := _smooth_step(_safe_div(p - day_end, dusk_end - day_end))
		_set_phase(Phase.DUSK)
		brightness = lerp(day_brightness, night_brightness, t)
		tint = day_tint.lerp(dusk_tint, t)

	else:
		# –∑–∞—Ö—ñ–¥ ‚Üí –Ω—ñ—á (–ø–ª–∞–≤–Ω–æ –≤ –Ω—ñ—á)
		var t := _smooth_step(_safe_div(p - dusk_end, 1.0 - dusk_end))
		_set_phase(Phase.NIGHT)
		brightness = lerp(night_brightness * 0.8, night_brightness, t)
		tint = dusk_tint.lerp(night_tint, t)

	_apply_fx(brightness, tint)

func _smooth_step(x: float) -> float:
	# –†–æ–±–∏—Ç—å –ø–µ—Ä–µ—Ö—ñ–¥ –¥—É–∂–µ –ø–ª–∞–≤–Ω–∏–º –Ω–∞ –ø–æ—á–∞—Ç–∫—É –π –≤ –∫—ñ–Ω—Ü—ñ
	return clampf(x * x * (3.0 - 2.0 * x), 0.0, 1.0)

func _apply_fx(brightness: float, tint: Color) -> void:
	# —è–∫—â–æ –≥–æ–¥–∏–Ω–Ω–∏–∫ –∑–∞—Ä–∞–∑ –ø–∞—É–∑–∏—Ç—å—Å—è –∑–æ–≤–Ω—ñ ‚Äî –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ FX
	if _is_paused_by_scene:
		return

	if fx_mat:
		fx_mat.set_shader_parameter("u_brightness", brightness)
		fx_mat.set_shader_parameter("u_contrast", 1.0)
		fx_mat.set_shader_parameter("u_saturation", 1.0)
		fx_mat.set_shader_parameter("u_tint", Color(tint.r, tint.g, tint.b, 1.0))
	else:
		# –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –ø—Ä–æ—Å—Ç–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è –∞–ª—å—Ñ–æ—é, —è–∫—â–æ —Ä–∞–ø—Ç–æ–º —à–µ–π–¥–µ—Ä–∞ –Ω–µ–º–∞—î
		if fx_rect:
			fx_rect.modulate = Color(0, 0, 0, 1.0 - brightness)

func _set_phase(p: Phase) -> void:
	if p != _phase:
		_phase = p
		emit_signal("phase_changed", _phase)

func _safe_div(a: float, b: float) -> float:
	return (a / b) if b != 0.0 else 0.0
